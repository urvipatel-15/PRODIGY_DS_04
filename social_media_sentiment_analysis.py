# -*- coding: utf-8 -*-
"""Social Media sentiment analysis.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1SxjXGukv7evI0xWQBQILtjB7CNz3twmz

Importing required libraries
"""

import numpy as np
import pandas as pd
from matplotlib import pyplot as plt
import seaborn as sns
from nltk import download
download('stopwords')
from nltk.corpus import stopwords
from nltk.stem import PorterStemmer
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, classification_report

"""Including the training and testing Datasets"""

train_df = pd.read_csv('/content/drive/MyDrive/twitter_training.csv')
test_df = pd.read_csv('/content/drive/MyDrive/twitter_validation.csv')

"""Veiwing the data"""

train_df.head()

"""Bar graph of sentiment

"""

from matplotlib import pyplot as plt
import seaborn as sns
train_df.groupby('sentiment').size().plot(kind='bar', color=sns.palettes.mpl_palette('Dark2'))
plt.gca().spines[['top', 'right',]].set_visible(False)

test_df.head()

from matplotlib import pyplot as plt
import seaborn as sns
test_df.groupby('sentiment').size().plot(kind='bar', color=sns.palettes.mpl_palette('Dark2'))
plt.gca().spines[['top', 'right',]].set_visible(False)

"""Dropping unnecessary columns"""

train_df = train_df.drop(train_df.columns[[0, 1]], axis=1)
test_df = test_df.drop(test_df.columns[[0, 1]], axis=1)

train_df.head()

"""Giving the colums a heading"""

train_df.columns = ['sentiment', 'text']
test_df.columns = ['sentiment', 'text']

train_df.head()

"""Preprocessing the text data"""

stop_words = set(stopwords.words('english'))
stemmer = PorterStemmer()

def preprocess_text(text):
    if isinstance(text, str):  # Check if the value is a string
        text = text.lower()
        text = ' '.join([stemmer.stem(word) for word in text.split() if word not in stop_words])
    else:
        text = ''  # Replace non-string values with an empty string
    return text

"""Assigning x and Y the parts of the dataset"""

train_df['text'] = train_df['text'].apply(preprocess_text)
test_df['text'] = test_df['text'].apply(preprocess_text)

vectorizer = TfidfVectorizer()
X_train = vectorizer.fit_transform(train_df['text'])
X_test = vectorizer.transform(test_df['text'])

y_train = train_df['sentiment']
y_test = test_df['sentiment']

"""Logistic Regression model is used for Sentiment Analysis"""

model = LogisticRegression()
model.fit(X_train, y_train)

"""Accuracy and classification report of the model"""

y_pred = model.predict(X_test)
accuracy = accuracy_score(y_test, y_pred)
print(f"Accuracy: {accuracy:.2f}")
print(classification_report(y_test, y_pred))